@page "/payment-success"
@using ECommerceFEApp.AuthServices
@inject HttpClient Http
@inject AuthService AuthService
@inject NavigationManager NavManager
@inject NavigationManager Navigation;
@using ECommerceFEApp.Services
@using ECommerceFEApp.Models
@inject CartService CartService

<h3>Payment Success!</h3>

@if (orderId == 0)
{
    <p>No order ID found.</p>
}
else
{
    <p>Payment success for order @orderId via @method!</p>
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert alert-success">@statusMessage</div>
    }

    <button class="btn btn-danger btn-sm" @onclick="() => NavigateToOrders()">Go To Orders</button>
}

@code {
    private int orderId;
    private string method = "";
    private string statusMessage = "";
    UserProfileModel profile = new UserProfileModel();
    private List<Cart> CartList = new();



    /*
    protected override async Task OnInitializedAsync()
    {
        // parse query
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        orderId = query["orderId"] ?? "";
        method = query["method"] ?? "";

        // attach JWT so the MarkPaid endpoint is authorized
        await AuthService.SetAuthHeaderAsync();

        if (!string.IsNullOrEmpty(orderId))
        {
            var response = await Http.PostAsync($"api/orders/markpaid/{orderId}", null);
            if (response.IsSuccessStatusCode)
            {
                statusMessage = $"Order {orderId} marked as Paid. Cart cleared, stock reduced.";
            }
            else
            {
                statusMessage = $"Failed to mark order {orderId} as paid. Status: {response.StatusCode}";
            }
        }
    }
    */
    protected override async Task OnInitializedAsync() {

    var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
    var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

    await AuthService.SetAuthHeaderAsync();

    // Parse "orderId" safely
    if (int.TryParse(query["orderId"], out var parsedOrderId))
    {
        orderId = parsedOrderId;
    }
    method = query["method"] ?? "";

    if (orderId > 0) {
        statusMessage = $"Order {orderId} was successfully processed. Thank you for your payment!";
    }

    
    var allCarts = await CartService.GetCartsAsync();
    await AuthService.SetAuthHeaderAsync();
    profile = await Http.GetFromJsonAsync<UserProfileModel>("api/userprofiles/me") ?? new UserProfileModel();
    var userId = profile.Id;
    CartList = allCarts.Where(cart => cart.UserId == userId).ToList();
    
    /*
    CartList = new List<Cart>();
    StateHasChanged();
    */

    var response = await Http.DeleteAsync("api/carts/clear");
    if (response.IsSuccessStatusCode)
    {
        // Update the UI to reflect the empty cart
        CartList = new List<Cart>(); // Empty cart items
    }

}

    private void NavigateToOrders()
    {
        NavManager.NavigateTo("/orders", forceLoad: true);    
    }

        public class UserProfileModel
    {
        public int Id { get; set; }
        public string GitHubId { get; set; } = string.Empty;
        public string Username { get; set; } = string.Empty;
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? Address { get; set; }
        public string? Email { get; set; }
        public string? PhoneNumber { get; set; }
        public string Role { get; set; } = string.Empty;
    }
}