@page "/products"
@using ECommerceFEApp.Services; 
@using ECommerceFEApp.Models;
@inject ProductService ProductService
@inject NavigationManager Navigation;

<h3>Products</h3>
 
<div class="filters mb-3">
    <!-- Search Filter -->
    <input @bind="NameFilter" class="form-control form-control-sm" placeholder="Search name..." style="width: 300px; display: inline-block; margin-right: 10px;" />
    <button @onclick="ApplyNameFilter" class="btn btn-primary btn-sm" style="margin-right: 10px;">Search</button>

    <!-- Price Filter -->
    <input @bind="PriceFilter" class="form-control form-control-sm" placeholder="Filter by price..." style="width: 300px; display: inline-block; margin-right: 10px;" />
    <button @onclick="ApplyPriceFilter" class="btn btn-primary btn-sm" style="margin-right: 10px;">Filter by Price</button>

    <!-- Clear Filters -->
    <button @onclick="ClearFilters" class="btn btn-secondary btn-sm">Clear Filters</button>
</div>

<table class="table">
<thead>
<tr>
<th>ID</th>
<th>Image</th>
<th>Name</th>
<th>Description</th>
<th>Price</th>
<th>Stock</th>
<th>Size</th>
</tr>
</thead>
<tbody>
    @foreach (var product in FilteredProducts)
    {
<tr>
<td>@product.Id</td>
<td>
    @if (!string.IsNullOrEmpty(product.ImageUrl))
    {
        <img src="@product.ImageUrl" style="width:50px;" alt="Thumbnail" />
    }
</td>
<td>
    <a href="/product-details/@product.Id">@product.Name</a>
</td>
<td>@product.Description</td>
<td>@product.Price</td>
<td>@product.Stock</td>
<td>@product.Size</td>
<td>
<button class="btn btn-warning" @onclick="() => NavigateToReview(product.Id)">Reviews</button>
<button class="btn btn-warning" @onclick="() => NavigateToUpdate(product.Id)">Edit</button>
<button class="btn btn-danger" @onclick="() => DeleteProduct(product.Id)">Delete</button>
</td>
</tr>
    }
</tbody>
</table>

@code {
    /*
    private List<Product> ProductList = new();
 
    protected override async Task OnInitializedAsync()
    {
        ProductList = await ProductService.GetProductsAsync();
    }

    private void NavigateToReview(int id) {
        Navigation.NavigateTo($"/reviews/{id}");
    }

    private void NavigateToUpdate(int id) {
        Navigation.NavigateTo($"/update-product/{id}");
    }

    private async Task DeleteProduct(int id) {
        await ProductService.DeleteProductAsync(id);
        ProductList = await ProductService.GetProductsAsync();
    }
    */

    @code {
    private List<Product> ProductList = new();
    private List<Product> FilteredProducts = new();
    
    private string NameFilter { get; set; } = string.Empty;
    private string PriceFilter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ProductList = await ProductService.GetProductsAsync(); 
        FilteredProducts = ProductList; 
    }

    // Filter by Name
    private void ApplyNameFilter()
    {
        FilteredProducts = ProductList.Where(product =>
            string.IsNullOrEmpty(NameFilter) || product.Name.Contains(NameFilter, StringComparison.OrdinalIgnoreCase)
        ).ToList();
        StateHasChanged();
    }

    // Filter by Price
    private void ApplyPriceFilter()
    {
        FilteredProducts = ProductList.Where(product =>
            string.IsNullOrEmpty(PriceFilter) || product.Price.ToString().Contains(PriceFilter)
        ).ToList();
        StateHasChanged();
    }

    private void ClearFilters()
    {
        NameFilter = string.Empty;
        PriceFilter = string.Empty;
        FilteredProducts = ProductList;
    }

    private void NavigateToReview(int id)
    {
        Navigation.NavigateTo($"/reviews/{id}");
    }

    private void NavigateToUpdate(int id)
    {
        Navigation.NavigateTo($"/update-product/{id}");
    }

    private async Task DeleteProduct(int id)
    {
        await ProductService.DeleteProductAsync(id); 
        ProductList = await ProductService.GetProductsAsync(); 
        FilteredProducts = ProductList; 
    }
}
}