@page "/products"
@using ECommerceFEApp.Services; 
@using ECommerceFEApp.Models;
@inject ProductService ProductService
@inject NavigationManager Navigation;

<h3>Products</h3>
 
<table class="table">
<thead>
<tr>
<th>ID</th>
<th>Image</th>
<th>Name</th>
<th>Description</th>
<th>Price</th>
<th>Stock</th>
<th>Size</th>
</tr>
</thead>
<tbody>
    @foreach (var product in ProductList)
    {
<tr>
<td>@product.Id</td>
<td>
    @if (!string.IsNullOrEmpty(product.ImageUrl))
    {
        <img src="@product.ImageUrl" style="width:50px;" alt="Thumbnail" />
    }
</td>
<td>
    <a href="/product-details/@product.Id">@product.Name</a>
</td>
<td>@product.Description</td>
<td>@product.Price</td>
<td>@product.Stock</td>
<td>@product.Size</td>
<td>
<button class="btn btn-warning" @onclick="() => NavigateToReview(product.Id)">Reviews</button>
<button class="btn btn-warning" @onclick="() => NavigateToUpdate(product.Id)">Edit</button>
<button class="btn btn-danger" @onclick="() => DeleteProduct(product.Id)">Delete</button>
</td>
</tr>
    }
</tbody>
</table>

@code {
    private List<Product> ProductList = new();
 
    protected override async Task OnInitializedAsync()
    {
        ProductList = await ProductService.GetProductsAsync();
    }

    private void NavigateToReview(int id) {
        Navigation.NavigateTo($"/reviews/{id}");
    }

    private void NavigateToUpdate(int id) {
        Navigation.NavigateTo($"/update-product/{id}");
    }

    private async Task DeleteProduct(int id) {
        await ProductService.DeleteProductAsync(id);
        ProductList = await ProductService.GetProductsAsync();
    }
}