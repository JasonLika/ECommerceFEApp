@page "/tickets"
@using ECommerceFEApp.Services; 
@using ECommerceFEApp.Models;
@inject TicketService TicketService
@inject CartService CartService;
@inject NavigationManager Navigation;
@using ECommerceFEApp.AuthServices;
@inject AuthService AuthService;
@inject HttpClient Http

<h3>Tickets</h3>
 
<table class="table">
<thead>
<tr>
<th>ID</th>
<th>Title</th>
<th>Description</th>
<td>
<button class="btn btn-warning" @onclick="() => NavigateToCreateTicket()">Create Ticket</button>
</td>
</tr>
</thead>
<tbody>
    @foreach (var ticket in TicketList)
    {
<tr>
<td>@ticket.Id</td>
<td>@ticket.Title</td>
<td>@ticket.Description</td>
</tr>
    }
</tbody>
</table>

@code {
    private List<Ticket> TicketList = new();
    private UserProfile user;
    UserProfileModel profile = new UserProfileModel();

 
    protected override async Task OnInitializedAsync()
    {
        //TicketList = await TicketService.GetTicketsAsync();

        var allTickets = await TicketService.GetTicketsAsync();
        await AuthService.SetAuthHeaderAsync();
        profile = await Http.GetFromJsonAsync<UserProfileModel>("api/userprofiles/me") ?? new UserProfileModel();
        var userId = profile.Id;
        TicketList = allTickets.Where(ticket => ticket.UserId == userId).ToList();

        /*
        var allTickets = await TicketService.GetTicketsAsync();
        user = await CartService.GetCurrentUserProfileAsync();
        var userId = user.Id;
        TicketList = allTickets.Where(ticket => ticket.UserId == userId).ToList();
        */
    }

    private void NavigateToCreateTicket() {
        Navigation.NavigateTo($"/createtickets");
    }


    /*
    private void NavigateToUpdate(int id) {
        Navigation.NavigateTo($"/update-product/{id}");
    }
    private async Task DeleteProduct(int id) {
        await ProductService.DeleteProductAsync(id);
        ProductList = await ProductService.GetProductsAsync();
    }
    */

        public class UserProfileModel
    {
        public int Id { get; set; }
        public string GitHubId { get; set; } = string.Empty;
        public string Username { get; set; } = string.Empty;
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? Address { get; set; }
        public string? Email { get; set; }
        public string? PhoneNumber { get; set; }
        public string Role { get; set; } = string.Empty;
    }
}